{"remainingRequest":"E:\\TvTest\\vue-tradingview\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\TvTest\\vue-tradingview\\src\\components\\TradingViewComponent.vue?vue&type=style&index=0&id=0143bce7&scoped=true&lang=scss&","dependencies":[{"path":"E:\\TvTest\\vue-tradingview\\src\\components\\TradingViewComponent.vue","mtime":1592297451156},{"path":"E:\\TvTest\\vue-tradingview\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\TvTest\\vue-tradingview\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\TvTest\\vue-tradingview\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\TvTest\\vue-tradingview\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\TvTest\\vue-tradingview\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\TvTest\\vue-tradingview\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KI2NoYXJ0X2NvbnRhaW5lciB7DQogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gMTAwcHgpOw0KfQ0K"},{"version":3,"sources":["TradingViewComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2eA;AACA;AACA","file":"TradingViewComponent.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div id=\"chart_container\"></div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue';\r\nimport axios from 'axios'\r\nimport { Watch, Component } from 'vue-property-decorator'\r\nimport store from '../store';\r\ndeclare const TradingView:any\r\ndeclare const $:any\r\nconst LastPrice = 1234.2365\r\n\r\n@Component\r\nexport default class TradingViewComponent extends Vue {\r\n    feed:any = null\r\n    chart:any = null\r\n    currency1:string = 'USD'\r\n    currency2:string = 'BTC'\r\n    bars:any = [\r\n        {\r\n            time:1508313600000,\r\n            close:42.1,\r\n            open:41.0,\r\n            high:43.0,\r\n            low:40.4,\r\n            volume:12000\r\n        }, {\r\n            time:1508317200000,\r\n            close:43.4,\r\n            open:42.9,\r\n            high:44.1,\r\n            low:42.1,\r\n            volume:18500\r\n        }, {\r\n            time:1508320800000,\r\n            close:44.3,\r\n            open:43.7,\r\n            high:44.8,\r\n            low:42.8,\r\n            volume:24000\r\n        }, {\r\n            time:1508324400000,\r\n            close:42.8,\r\n            open:44.5,\r\n            high:44.5,\r\n            low:42.3,\r\n            volume:45000\r\n        }\r\n    ]\r\n\r\n    constructor() {\r\n        super()\r\n        this.createData()\r\n        store.dispatch('updateChartData', this.bars)\r\n    }\r\n\r\n    createData() {\r\n        setInterval(() => {\r\n            let data = store.getters.chartData\r\n            data.push({\r\n                time: new Date().getTime(),\r\n                close: 40 + Math.random() * 5,\r\n                open: 40 + Math.random() * 5,\r\n                high: 40 + Math.random() * 5,\r\n                low: 40 + Math.random() * 5,\r\n                volume: 100000 * Math.random()\r\n            })\r\n            store.dispatch('updateChartData', data)\r\n            this.changePair()\r\n        }, 1000)\r\n    }\r\n\r\n    changePair() {\r\n        if(this.chart && this.feed){\r\n            this.feed._fireEvent('pair_change');\r\n            this.chart.activeChart().resetData();\r\n            this.chart.activeChart().setSymbol(this.currency1+\":\"+this.currency2, () => {\r\n            });\r\n        }\r\n    }\r\n\r\n    mounted() {\r\n        this.feed = this.createFeed();\r\n\r\n        TradingView.onready((configurationData:any) => {\r\n            this.chart = new TradingView.widget({\r\n                fullscreen: false,\r\n                autosize: true,\r\n                symbol:this.currency1 + \":\"+ this.currency2,\r\n                container_id: \"chart_container\",\r\n                datafeed: this.feed,\r\n                library_path: \"/custom_scripts/chart_main/\",\r\n                locale: \"en\",\r\n                timezone: 'Etc/UTC', //todo: ustawianie timezone'a po strefie usera\r\n                charts_storage_api_version: \"1.1\",\r\n                client_id: 'tradingview.com',\r\n                user_id: 'public_user_id',\r\n                debug: true,\r\n                // loading_screen:{ backgroundColor: \"#00ff00\",foregroundColor: \"#000000\", }, //todo:do it\r\n                interval: '60',\r\n                // timeframe:'',//todo: na koncu\r\n                toolbar_bg: \"#20334d\",\r\n                // saved_data: this.savedData,\r\n                allow_symbol_change: true,\r\n                time_frames: [\r\n                    {text: \"1y\", resolution: \"1W\"},\r\n                    {text: \"6m\", resolution: \"3D\"},\r\n                    {text: \"3m\", resolution: \"1D\"},\r\n                    {text: \"1m\", resolution: \"1D\"},\r\n                    {text: \"1w\", resolution: \"30\"},\r\n                    {text: \"3d\", resolution: \"30\"},\r\n                    {text: \"1d\", resolution: \"30\"},\r\n                    {text: \"6h\", resolution: \"15\"},\r\n                    {text: \"1h\", resolution: \"1\"}],\r\n                drawings_access: {\r\n                    type: 'black',\r\n                    // tools: [{name: \"Regression Trend\"}]//todo: moje\r\n                    tools: [{name: \"Trend Line\", grayed: true}, {name: \"Trend Angle\", grayed: true}] //todo: bb\r\n                },\r\n                disabled_features: [\r\n                    \"header_symbol_search\",\r\n                    \"header_interval_dialog_button\",\r\n                    \"show_interval_dialog_on_key_press\",\r\n                    \"symbol_search_hot_key\",\r\n                    \"study_dialog_search_control\",\r\n                    \"display_market_status\",\r\n                    \"header_compare\",\r\n                    \"edit_buttons_in_legend\",\r\n                    \"symbol_info\",\r\n                    \"border_around_the_chart\",\r\n                    \"main_series_scale_menu\",\r\n                    \"star_some_intervals_by_default\",\r\n                    \"datasource_copypaste\",\r\n                    \"right_bar_stays_on_scroll\",\r\n                    \"context_menus\",\r\n                    \"go_to_date\",\r\n                    \"compare_symbol\",\r\n                    \"border_around_the_chart\",\r\n                    \"timezone_menu\",\r\n                    \"header_resolutions\",//todo: przetestowac\r\n                    \"control_bar\",//todo: przetestowac\r\n                    \"edit_buttons_in_legend\",//todo: przetestowac\r\n                    \"remove_library_container_border\",\r\n                ],\r\n                enabled_features: [\r\n                    \"dont_show_boolean_study_arguments\",\r\n                    \"use_localstorage_for_settings\",\r\n                    \"remove_library_container_border\",\r\n                    \"save_chart_properties_to_local_storage\",\r\n                    \"side_toolbar_in_fullscreen_mode\",\r\n                    \"hide_last_na_study_output\",\r\n                    \"constraint_dialogs_movement\",//todo: nie do ko≈Ñca jestem pewien\r\n                ],\r\n                studies_overrides: {\r\n                    \"volume.volume.color.0\": \"#fe4761\",\r\n                    \"volume.volume.color.1\": \"#3fcfb4\",\r\n                    \"volume.volume.transparency\": 75,\r\n                },\r\n                overrides: {\r\n                    \"symbolWatermarkProperties.color\": \"rgba(0,0,0, 0)\",\r\n                    \"paneProperties.background\": \"#20334d\",\r\n                    \"paneProperties.vertGridProperties.color\": \"#344568\",\r\n                    \"paneProperties.horzGridProperties.color\": \"#344568\",\r\n                    \"paneProperties.crossHairProperties.color\": \"#58637a\",\r\n                    \"paneProperties.crossHairProperties.style\": 2,\r\n                    \"mainSeriesProperties.style\": 9,\r\n                    \"mainSeriesProperties.showCountdown\": false,\r\n                    \"scalesProperties.showSeriesLastValue\": true,\r\n                    \"mainSeriesProperties.visible\": false,\r\n                    \"mainSeriesProperties.showPriceLine\": false,\r\n                    \"mainSeriesProperties.priceLineWidth\": 1,\r\n                    \"mainSeriesProperties.lockScale\": false,\r\n                    \"mainSeriesProperties.minTick\": \"default\",\r\n                    \"mainSeriesProperties.extendedHours\": false,\r\n                    \"volumePaneSize\": \"tiny\",\r\n                    editorFontsList: [\"Lato\", \"Arial\", \"Verdana\", \"Courier New\", \"Times New Roman\"],\r\n                    \"paneProperties.topMargin\": 5,\r\n                    \"paneProperties.bottomMargin\": 5,\r\n                    \"paneProperties.leftAxisProperties.autoScale\": true,\r\n                    \"paneProperties.leftAxisProperties.autoScaleDisabled\": false,\r\n                    \"paneProperties.leftAxisProperties.percentage\": false,\r\n                    \"paneProperties.leftAxisProperties.percentageDisabled\": false,\r\n                    \"paneProperties.leftAxisProperties.log\": false,\r\n                    \"paneProperties.leftAxisProperties.logDisabled\": false,\r\n                    \"paneProperties.leftAxisProperties.alignLabels\": true,\r\n                    // \"paneProperties.legendProperties.showStudyArguments\": true,\r\n                    \"paneProperties.legendProperties.showStudyTitles\": true,\r\n                    \"paneProperties.legendProperties.showStudyValues\": true,\r\n                    \"paneProperties.legendProperties.showSeriesTitle\": true,\r\n                    \"paneProperties.legendProperties.showSeriesOHLC\": true,\r\n                    \"scalesProperties.showLeftScale\": false,\r\n                    \"scalesProperties.showRightScale\": true,\r\n                    \"scalesProperties.backgroundColor\": \"#20334d\",\r\n                    \"scalesProperties.lineColor\": \"#46587b\",\r\n                    \"scalesProperties.textColor\": \"#8f98ad\",\r\n                    \"scalesProperties.scaleSeriesOnly\": false,\r\n                    \"mainSeriesProperties.priceAxisProperties.autoScale\": true,\r\n                    \"mainSeriesProperties.priceAxisProperties.autoScaleDisabled\": false,\r\n                    \"mainSeriesProperties.priceAxisProperties.percentage\": false,\r\n                    \"mainSeriesProperties.priceAxisProperties.percentageDisabled\": false,\r\n                    \"mainSeriesProperties.priceAxisProperties.log\": false,\r\n                    \"mainSeriesProperties.priceAxisProperties.logDisabled\": false,\r\n                    \"mainSeriesProperties.candleStyle.upColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.candleStyle.downColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.candleStyle.drawWick\": true,\r\n                    \"mainSeriesProperties.candleStyle.drawBorder\": true,\r\n                    \"mainSeriesProperties.candleStyle.borderColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.candleStyle.borderUpColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.candleStyle.borderDownColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.candleStyle.wickColor\": \"#737375\",\r\n                    \"mainSeriesProperties.candleStyle.wickUpColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.candleStyle.wickDownColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.candleStyle.barColorsOnPrevClose\": false,\r\n                    \"mainSeriesProperties.hollowCandleStyle.upColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.hollowCandleStyle.downColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.hollowCandleStyle.drawWick\": true,\r\n                    \"mainSeriesProperties.hollowCandleStyle.drawBorder\": true,\r\n                    \"mainSeriesProperties.hollowCandleStyle.borderColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.hollowCandleStyle.borderUpColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.hollowCandleStyle.borderDownColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.hollowCandleStyle.wickColor\": \"#737375\",\r\n                    \"mainSeriesProperties.hollowCandleStyle.wickUpColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.hollowCandleStyle.wickDownColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.haStyle.upColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.haStyle.downColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.haStyle.drawWick\": true,\r\n                    \"mainSeriesProperties.haStyle.drawBorder\": true,\r\n                    \"mainSeriesProperties.haStyle.borderColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.haStyle.borderUpColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.haStyle.borderDownColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.haStyle.wickColor\": \"#737375\",\r\n                    \"mainSeriesProperties.haStyle.wickUpColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.haStyle.wickDownColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.haStyle.barColorsOnPrevClose\": false,\r\n                    \"mainSeriesProperties.barStyle.upColor\": \"#3fcfb4\",\r\n                    \"mainSeriesProperties.barStyle.downColor\": \"#fe4761\",\r\n                    \"mainSeriesProperties.barStyle.barColorsOnPrevClose\": false,\r\n                    \"mainSeriesProperties.barStyle.dontDrawOpen\": false,\r\n                    \"mainSeriesProperties.lineStyle.color\": \"#0cbef3\",\r\n                    \"mainSeriesProperties.lineStyle.linestyle\": 0,\r\n                    \"mainSeriesProperties.lineStyle.linewidth\": 1,\r\n                    \"mainSeriesProperties.lineStyle.priceSource\": \"close\",\r\n                    \"mainSeriesProperties.areaStyle.color1\": \"#0cbef3\",\r\n                    \"mainSeriesProperties.areaStyle.color2\": \"#0098c4\",\r\n                    \"mainSeriesProperties.areaStyle.linecolor\": \"#0cbef3\",\r\n                    \"mainSeriesProperties.areaStyle.linestyle\": 0,\r\n                    \"mainSeriesProperties.areaStyle.linewidth\": 1,\r\n                    \"mainSeriesProperties.areaStyle.priceSource\": \"close\",\r\n                    \"mainSeriesProperties.areaStyle.transparency\": 80\r\n                },\r\n                custom_css_url: 'chart.css'\r\n            });\r\n        });\r\n    }\r\n\r\n    createFeed() {\r\n        let Datafeed:any = {};\r\n\r\n        Datafeed.DataPulseUpdater = function(datafeed:any, updateFrequency:any) {\r\n            this._datafeed = datafeed;\r\n            this._subscribers = {};\r\n\r\n            this._requestsPending = 0;\r\n            var that = this;\r\n\r\n            var update = function() {\r\n                if (that._requestsPending > 0) {\r\n                    return;\r\n                }\r\n\r\n                for (var listenerGUID in that._subscribers) {\r\n                    var subscriptionRecord = that._subscribers[listenerGUID];\r\n                    var resolution = subscriptionRecord.resolution;\r\n\r\n                    var datesRangeRight = parseInt(((new Date().valueOf()) / 1000).toFixed());\r\n\r\n                    //\tBEWARE: please note we really need 2 bars, not the only last one\r\n                    //\tsee the explanation below. `10` is the `large enough` value to work around holidays\r\n                    var datesRangeLeft = datesRangeRight - that.periodLengthSeconds(resolution, 10);\r\n\r\n                    that._requestsPending++;\r\n\r\n                    (function(_subscriptionRecord) { // eslint-disable-line\r\n                        that._datafeed.getBars(_subscriptionRecord.symbolInfo, resolution, datesRangeLeft, datesRangeRight, function(bars:any) {\r\n                                that._requestsPending--;\r\n\r\n                                //\tmeans the subscription was cancelled while waiting for data\r\n                                if (!that._subscribers.hasOwnProperty(listenerGUID)) {\r\n                                    return;\r\n                                }\r\n\r\n                                if (bars.length === 0) {\r\n                                    return;\r\n                                }\r\n\r\n                                var lastBar = bars[bars.length - 1];\r\n                                if (!isNaN(_subscriptionRecord.lastBarTime) && lastBar.time < _subscriptionRecord.lastBarTime) {\r\n                                    return;\r\n                                }\r\n\r\n                                var subscribers = _subscriptionRecord.listeners;\r\n\r\n                                //\tBEWARE: this one isn't working when first update comes and this update makes a new bar. In this case\r\n                                //\t_subscriptionRecord.lastBarTime = NaN\r\n                                var isNewBar = !isNaN(_subscriptionRecord.lastBarTime) && lastBar.time > _subscriptionRecord.lastBarTime;\r\n\r\n                                //\tPulse updating may miss some trades data (ie, if pulse period = 10 secods and new bar is started 5 seconds later after the last update, the\r\n                                //\told bar's last 5 seconds trades will be lost). Thus, at fist we should broadcast old bar updates when it's ready.\r\n                                if (isNewBar) {\r\n                                    if (bars.length < 2) {\r\n                                        throw new Error('Not enough bars in history for proper pulse update. Need at least 2.');\r\n                                    }\r\n\r\n                                    var previousBar = bars[bars.length - 2];\r\n                                    for (var i = 0; i < subscribers.length; ++i) {\r\n                                        subscribers[i](previousBar);\r\n                                    }\r\n                                }\r\n\r\n                                _subscriptionRecord.lastBarTime = lastBar.time;\r\n\r\n                                for (var j = 0; j < subscribers.length; ++j) {\r\n                                    subscribers[j](lastBar);\r\n                                }\r\n                            },\r\n\r\n                            //\ton error\r\n                            function() {\r\n                                that._requestsPending--;\r\n                            });\r\n                    })(subscriptionRecord);\r\n                }\r\n            };\r\n\r\n            if (typeof updateFrequency != 'undefined' && updateFrequency > 0) {\r\n                setInterval(update, updateFrequency);\r\n            }\r\n        };\r\n\r\n        Datafeed.DataPulseUpdater.prototype.periodLengthSeconds = function(resolution:any, requiredPeriodsCount:any) {\r\n            var daysCount = 0;\r\n\r\n            if (resolution === 'D') {\r\n                daysCount = requiredPeriodsCount;\r\n            } else if (resolution === 'M') {\r\n                daysCount = 31 * requiredPeriodsCount;\r\n            } else if (resolution === 'W') {\r\n                daysCount = 7 * requiredPeriodsCount;\r\n            } else {\r\n                daysCount = requiredPeriodsCount * resolution / (24 * 60);\r\n            }\r\n\r\n            return daysCount * 24 * 60 * 60;\r\n        };\r\n\r\n        Datafeed.DataPulseUpdater.prototype.subscribeDataListener = function(symbolInfo:any, resolution:any, newDataCallback:any, listenerGUID:any) {\r\n            this._datafeed._logMessage('Subscribing ' + listenerGUID);\r\n\r\n            if (!this._subscribers.hasOwnProperty(listenerGUID)) {\r\n                this._subscribers[listenerGUID] = {\r\n                    symbolInfo: symbolInfo,\r\n                    resolution: resolution,\r\n                    lastBarTime: NaN,\r\n                    listeners: []\r\n                };\r\n            }\r\n\r\n            this._subscribers[listenerGUID].listeners.push(newDataCallback);\r\n        };\r\n\r\n        Datafeed.DataPulseUpdater.prototype.unsubscribeDataListener = function(listenerGUID:any) {\r\n            this._datafeed._logMessage('Unsubscribing ' + listenerGUID);\r\n            delete this._subscribers[listenerGUID];\r\n        };\r\n\r\n        Datafeed.Container = function(updateFrequency:any){\r\n            this._configuration = {\r\n                supports_search: false,\r\n                supports_group_request: false,\r\n                supported_resolutions: ['1', '3', '5', '15', '30', '60', '120', '240', '360', '720', '1D', '3D', '1W', '1M'],\r\n                supports_marks: true,\r\n                supports_timescale_marks: true,\r\n                exchanges: ['myExchange']\r\n            };\r\n\r\n            this._barsPulseUpdater = new Datafeed.DataPulseUpdater(this, updateFrequency || 10 * 1000);\r\n            // this._quotesPulseUpdater = new Datafeed.QuotesPulseUpdater(this);\r\n\r\n            this._enableLogging = true;\r\n            this._callbacks = {};\r\n\r\n            this._initializationFinished = true;\r\n            this._fireEvent('initialized');\r\n            this._fireEvent('configuration_ready');\r\n        };\r\n\r\n        Datafeed.Container.prototype._fireEvent = function(event:any, argument:any) {\r\n            if (this._callbacks.hasOwnProperty(event)) {\r\n                var callbacksChain = this._callbacks[event];\r\n                for (var i = 0; i < callbacksChain.length; ++i) {\r\n                    callbacksChain[i](argument);\r\n                }\r\n\r\n                this._callbacks[event] = [];\r\n            }\r\n        };\r\n\r\n        Datafeed.Container.prototype._logMessage = function(message:any) {\r\n            if (this._enableLogging) {\r\n                var now = new Date();\r\n            }\r\n        };\r\n\r\n        Datafeed.Container.prototype.on = function(event:any, callback:any) {\r\n            if (!this._callbacks.hasOwnProperty(event)) {\r\n                this._callbacks[event] = [];\r\n            }\r\n\r\n            this._callbacks[event].push(callback);\r\n            return this;\r\n        };\r\n\r\n        Datafeed.Container.prototype.onReady = function(callback:any) {\r\n            let that = this;\r\n            if (this._configuration) {\r\n                setTimeout(function() {\r\n                    callback(that._configuration);\r\n                }, 0);\r\n            }\r\n            else {\r\n                this.on('configuration_ready', function() {\r\n                    callback(that._configuration);\r\n                });\r\n            }\r\n        };\r\n\r\n        Datafeed.Container.prototype.resolveSymbol = function(symbolName:any, onSymbolResolvedCallback:any, onResolveErrorCallback:any) {\r\n            this._logMessage(\"GOWNO :: resolve symbol \"+ symbolName);\r\n            Promise.resolve().then(() => {\r\n                this._logMessage(\"GOWNO :: onResultReady inject \"+this.currency1 + \":\"+ this.currency2);\r\n                onSymbolResolvedCallback({\r\n                    \"name\": this.currency1 + \":\"+ this.currency2,\r\n                    \"timezone\": \"Europe/Warsaw\",\r\n                    \"pricescale\": LastPrice > 1000 ? 100 : 100000000,\r\n                    \"minmov\": 1,\r\n                    \"minmov2\": 0,\r\n                    \"ticker\": this.currency1 + \":\"+ this.currency2,\r\n                    \"description\": \"\",\r\n                    \"session\": \"24x7\",\r\n                    \"type\": \"bitcoin\",\r\n                    \"exchange-traded\": \"myExchange\",\r\n                    \"exchange-listed\": \"myExchange\",\r\n                    \"has_intraday\": true,\r\n                    \"intraday_multipliers\": ['60'], //It is an array containing intraday resolutions (in minutes) the datafeed wants to build by itself. E.g., if the datafeed reported he supports resolutions [\"1\", \"5\", \"15\"], but in fact it has only 1 minute bars for symbol X, it should set intraday_multipliers of X = [1]. This will make Charting Library to build 5 and 15 resolutions by itself.\r\n                    \"has_weekly_and_monthly\": false,\r\n                    \"has_no_volume\": false,\r\n                    \"regular_session\": \"24x7\"\r\n                });\r\n            })\r\n        };\r\n\r\n        Datafeed.Container.prototype.getBars = function(symbolInfo:any, resolution:any, rangeStartDate:any, rangeEndDate:any, onDataCallback:any, onErrorCallback:any) {\r\n            if (rangeStartDate > 0 && (rangeStartDate + '').length > 10) {\r\n                throw new Error();\r\n            }\r\n            onDataCallback([], { noData: true });\r\n            //onDataCallback(bars, { noData: true , nextTime: data.nb || data.nextTime });\r\n        };\r\n\r\n        Datafeed.Container.prototype.subscribeBars = function(symbolInfo:any, resolution:any, onRealtimeCallback:any, listenerGUID:any, onResetCacheNeededCallback:any) {\r\n            store.getters.chartData.forEach(function (bar:any) { // in subscribeBars\r\n                onRealtimeCallback(bar)\r\n            });\r\n            this.on('pair_change', function() {\r\n                onResetCacheNeededCallback();\r\n            });\r\n            //this._barsPulseUpdater.subscribeDataListener(symbolInfo, resolution, onRealtimeCallback, listenerGUID, onResetCacheNeededCallback);\r\n        };\r\n\r\n        Datafeed.Container.prototype.unsubscribeBars = function(listenerGUID:any) {\r\n            this._barsPulseUpdater.unsubscribeDataListener(listenerGUID);\r\n        };\r\n\r\n        return new Datafeed.Container;\r\n    }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped lang=\"scss\">\r\n#chart_container {\r\n    height: calc(100vh - 100px);\r\n}\r\n</style>\r\n"]}]}
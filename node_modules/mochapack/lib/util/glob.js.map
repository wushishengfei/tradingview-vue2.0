{"version":3,"sources":["../../src/util/glob.js"],"names":["isDirectory","filePath","path","extname","length","glob","patterns","options","ensureGlob","entry","recursive","pattern","normalized","Error","parent","indexOf","globstar","extensionsToGlob","extensions","filtered","filter","Boolean","join"],"mappings":";;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc,CAACC,QAAD;AAAA,SAAcC,eAAKC,OAAL,CAAaF,QAAb,EAAuBG,MAAvB,KAAkC,CAAhD;AAAA,CAApB;AAEO,IAAMC,sBAAO,SAAPA,IAAO,CAClBC,QADkB,EAElBC,OAFkB;AAAA;AAAA,mBAGS,sBAAOD,QAAP,EAAiBC,OAAjB,CAHT;AAAA;AAAA,CAAb;;AAKA,IAAMC,kCAAa,SAAbA,UAAa,CAACC,KAAD,EAAiF;AAAA,MAAjEC,SAAiE,uEAA5C,KAA4C;AAAA,MAArCC,OAAqC,uEAAnB,MAAmB;;AACzG,MAAMC,aAAa,6BAAcH,KAAd,CAAnB;;AAEA,MAAI,sBAAOG,UAAP,CAAJ,EAAwB;AACtB,WAAOA,UAAP;AACD,GAFD,MAEO,IAAIZ,YAAYY,UAAZ,CAAJ,EAA6B;AAClC,QAAI,CAAC,sBAAOD,OAAP,CAAL,EAAsB;AACpB,YAAM,IAAIE,KAAJ,oBAA2BF,OAA3B,kCAAN;AACD;;AAED,QAAMG,SAAS,0BAAWH,OAAX,CAAf;AACA,QAAIG,WAAW,GAAX,IAAkBH,QAAQI,OAAR,CAAgB,IAAhB,MAA0B,CAAC,CAAjD,EAAoD;AAClD,YAAM,IAAIF,KAAJ,oBAA2BF,OAA3B,uCAAN;AACD;;AAED,QAAMK,WAAWN,YAAY,KAAZ,GAAoB,EAArC;;AAEA,WAAUE,UAAV,SAAwBI,QAAxB,GAAmCL,OAAnC;AACD;AACD,SAAOC,UAAP;AACD,CApBM;;AAsBA,IAAMK,8CAAmB,SAAnBA,gBAAmB,CAACC,UAAD,EAA+B;AAC7D,MAAMC,WAAWD,WAAWE,MAAX,CAAkBC,OAAlB,CAAjB;;AAEA,MAAIF,SAASf,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,MAAP;AACD,GAFD,MAEO,IAAIe,SAASf,MAAT,KAAoB,CAAxB,EAA2B;AAChC,iBAAWe,SAAS,CAAT,CAAX;AACD;AACD,gBAAYA,SAASG,IAAT,CAAc,GAAd,CAAZ;AACD,CATM","file":"glob.js","sourcesContent":["// @flow\nimport path from 'path';\nimport globby from 'globby';\nimport isGlob from 'is-glob';\nimport globParent from 'glob-parent';\nimport normalizePath from 'normalize-path';\n\nconst isDirectory = (filePath) => path.extname(filePath).length === 0;\n\nexport const glob = async (\n  patterns: Array<string>,\n  options: {},\n): Promise<Array<string>> => globby(patterns, options);\n\nexport const ensureGlob = (entry: string, recursive: boolean = false, pattern: string = '*.js'): string => {\n  const normalized = normalizePath(entry);\n\n  if (isGlob(normalized)) {\n    return normalized;\n  } else if (isDirectory(normalized)) {\n    if (!isGlob(pattern)) {\n      throw new Error(`Provided Glob ${pattern} is not a valid glob pattern`);\n    }\n\n    const parent = globParent(pattern);\n    if (parent !== '.' || pattern.indexOf('**') !== -1) {\n      throw new Error(`Provided Glob ${pattern} must be a file pattern like *.js`);\n    }\n\n    const globstar = recursive ? '**/' : '';\n\n    return `${normalized}/${globstar}${pattern}`;\n  }\n  return normalized;\n};\n\nexport const extensionsToGlob = (extensions: Array<string>) => {\n  const filtered = extensions.filter(Boolean);\n\n  if (filtered.length === 0) {\n    return '*.js';\n  } else if (filtered.length === 1) {\n    return `*${filtered[0]}`;\n  }\n  return `*{${filtered.join(',')}}`;\n};\n"]}
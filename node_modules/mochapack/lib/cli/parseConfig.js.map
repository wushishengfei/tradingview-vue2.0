{"version":3,"sources":["../../src/cli/parseConfig.js"],"names":["parseConfig","defaultConfig","handleMissingConfig","config","Error","createStripSurroundingChar","c","s","indexOf","lastIndexOf","length","substring","stripSingleQuotes","stripDoubleQuotes","removeSurroundingQuotes","str","stripped","explicitConfig","argv","fs","readFileSync","replace","split","filter","Boolean","map","value","defaultOptions"],"mappings":";;;;;kBAkCwBA,W;;AAlCxB;;;;AACA;;AACA;;;;;;AAEA,IAAMC,gBAAgB,gBAAtB;;AAEA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACnC,MAAIA,MAAJ,EAAY;AACV,UAAM,IAAIC,KAAJ,qBAA2BD,MAA3B,kBAAN;AACD;;AAED,SAAO,EAAP;AACD;;AAED,IAAME,6BAA6B,SAA7BA,0BAA6B,CAACC,CAAD;AAAA,SAAO,UAACC,CAAD,EAAO;AAC/C,QAAIA,EAAEC,OAAF,CAAUF,CAAV,MAAiB,CAAjB,IAAsBC,EAAEE,WAAF,CAAcH,CAAd,MAAqBC,EAAEG,MAAF,GAAW,CAAtD,IAA2DH,EAAEC,OAAF,CAAUF,CAAV,MAAiBC,EAAEE,WAAF,CAAcH,CAAd,CAAhF,EAAkG;AAChG,aAAOC,EAAEI,SAAF,CAAY,CAAZ,EAAeJ,EAAEG,MAAF,GAAW,CAA1B,CAAP;AACD;AACD,WAAOH,CAAP;AACD,GALkC;AAAA,CAAnC;;AAOA,IAAMK,oBAAoBP,2BAA2B,GAA3B,CAA1B;AACA,IAAMQ,oBAAoBR,2BAA2B,GAA3B,CAA1B;;AAEA,IAAMS,0BAA0B,SAA1BA,uBAA0B,CAACC,GAAD,EAAS;AACvC,MAAMC,WAAWH,kBAAkBE,GAAlB,CAAjB;;AAEA,MAAIC,aAAaD,GAAjB,EAAsB;AACpB;AACA,WAAOC,QAAP;AACD;AACD,SAAOJ,kBAAkBG,GAAlB,CAAP;AACD,CARD;;AAUe,SAASf,WAAT,CAAqBiB,cAArB,EAAqC;AAClD,MAAMd,SAASc,kBAAkBhB,aAAjC;;AAEA,MAAI,CAAC,4BAAeE,MAAf,CAAL,EAA6B;AAC3B,WAAOD,oBAAoBe,cAApB,CAAP;AACD;;AAED,MAAMC,OAAOC,aAAGC,YAAH,CAAgBjB,MAAhB,EAAwB,MAAxB,EACVkB,OADU,CACF,OADE,EACO,KADP,EAEVC,KAFU,CAEJ,IAFI,EAGVC,MAHU,CAGHC,OAHG,EAIVC,GAJU,CAIN,UAACC,KAAD;AAAA,WAAWA,MAAML,OAAN,CAAc,MAAd,EAAsB,GAAtB,CAAX;AAAA,GAJM,EAKVI,GALU,CAKNX,uBALM,CAAb;AAMA,MAAMa,iBAAiB,yBAAUT,IAAV,EAAgB,IAAhB,CAAvB;AACA,SAAOS,cAAP;AACD","file":"parseConfig.js","sourcesContent":["import fs from 'fs';\nimport { existsFileSync } from '../util/exists';\nimport parseArgv from './parseArgv';\n\nconst defaultConfig = 'mochapack.opts';\n\nfunction handleMissingConfig(config) {\n  if (config) {\n    throw new Error(`Options file '${config}' not found`);\n  }\n\n  return {};\n}\n\nconst createStripSurroundingChar = (c) => (s) => {\n  if (s.indexOf(c) === 0 && s.lastIndexOf(c) === s.length - 1 && s.indexOf(c) !== s.lastIndexOf(c)) {\n    return s.substring(1, s.length - 1);\n  }\n  return s;\n};\n\nconst stripSingleQuotes = createStripSurroundingChar(\"'\");\nconst stripDoubleQuotes = createStripSurroundingChar('\"');\n\nconst removeSurroundingQuotes = (str) => {\n  const stripped = stripDoubleQuotes(str);\n\n  if (stripped !== str) {\n    // strip only once\n    return stripped;\n  }\n  return stripSingleQuotes(str);\n};\n\nexport default function parseConfig(explicitConfig) {\n  const config = explicitConfig || defaultConfig;\n\n  if (!existsFileSync(config)) {\n    return handleMissingConfig(explicitConfig);\n  }\n\n  const argv = fs.readFileSync(config, 'utf8')\n    .replace(/\\\\\\s/g, '%20')\n    .split(/\\s/)\n    .filter(Boolean)\n    .map((value) => value.replace(/%20/g, ' '))\n    .map(removeSurroundingQuotes);\n  const defaultOptions = parseArgv(argv, true);\n  return defaultOptions;\n}\n"]}
{"version":3,"sources":["../../src/cli/requireWebpackConfig.js"],"names":["sortExtensions","ext1","ext2","length","extensions","interpret","sort","fileExists","filePath","fs","existsSync","e","findConfigFile","dirPath","baseName","i","path","resolve","getConfigExtension","configPath","extension","indexOf","extname","registerCompiler","moduleDescriptor","require","Array","isArray","module","register","requireWebpackConfig","webpackConfig","required","env","mode","configExtension","configFound","config","configDirPath","dirname","configBaseName","basename","configPathPrecompiled","configExtensionPrecompiled","Error","default"],"mappings":"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","file":"requireWebpackConfig.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport interpret from 'interpret';\n\nfunction sortExtensions(ext1, ext2) {\n  if (ext1 === '.js') {\n    return -1;\n  }\n  if (ext2 === '.js') {\n    return 1;\n  }\n  return ext1.length - ext2.length;\n}\n\nconst extensions = Object.keys(interpret.extensions).sort(sortExtensions);\n\nfunction fileExists(filePath) {\n  try {\n    return fs.existsSync(filePath);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction findConfigFile(dirPath, baseName) {\n  for (let i = 0; i < extensions.length; i += 1) {\n    const filePath = path.resolve(dirPath, `${baseName}${extensions[i]}`);\n    if (fileExists(filePath)) {\n      return filePath;\n    }\n  }\n  return null;\n}\n\nfunction getConfigExtension(configPath) {\n  for (let i = extensions.length - 1; i >= 0; i -= 1) {\n    const extension = extensions[i];\n    if (configPath.indexOf(extension, configPath.length - extension.length) > -1) {\n      return extension;\n    }\n  }\n  return path.extname(configPath);\n}\n\nfunction registerCompiler(moduleDescriptor) {\n  if (!moduleDescriptor) {\n    return;\n  }\n\n  if (typeof moduleDescriptor === 'string') {\n    require(moduleDescriptor); // eslint-disable-line global-require, import/no-dynamic-require\n  } else if (!Array.isArray(moduleDescriptor)) {\n    const module = require(moduleDescriptor.module); // eslint-disable-line global-require, import/no-dynamic-require\n    moduleDescriptor.register(module);\n  } else {\n    for (let i = 0; i < moduleDescriptor.length; i += 1) {\n      try {\n        registerCompiler(moduleDescriptor[i]);\n        break;\n      } catch (e) {\n        // do nothing\n      }\n    }\n  }\n}\n\nexport default async function requireWebpackConfig(webpackConfig, required, env, mode) {\n  const configPath = path.resolve(webpackConfig);\n  const configExtension = getConfigExtension(configPath);\n  let configFound = false;\n  let config = {};\n\n  if (fileExists(configPath)) {\n    // config exists, register compiler for non-js extensions\n    registerCompiler(interpret.extensions[configExtension]);\n    // require config\n    config = require(configPath); // eslint-disable-line global-require, import/no-dynamic-require\n    configFound = true;\n  } else if (configExtension === '.js') {\n    // config path does not exist, try to require it with precompiler\n    const configDirPath = path.dirname(configPath);\n    const configBaseName = path.basename(configPath, configExtension);\n    const configPathPrecompiled = findConfigFile(configDirPath, configBaseName);\n    if (configPathPrecompiled != null) {\n      // found a config that needs to be precompiled\n      const configExtensionPrecompiled = getConfigExtension(configPathPrecompiled);\n      // register compiler & require config\n      registerCompiler(interpret.extensions[configExtensionPrecompiled]);\n      config = require(configPathPrecompiled); // eslint-disable-line global-require, import/no-dynamic-require\n      configFound = true;\n    }\n  }\n\n  if (!configFound) {\n    if (required) {\n      throw new Error(`Webpack config could not be found: ${webpackConfig}`);\n    } else if (mode != null) {\n      config.mode = mode;\n    }\n    return config;\n  }\n\n  config = config.default || config;\n\n  if (typeof config === 'function') {\n    config = await Promise.resolve(config(env));\n  }\n\n  if (mode != null) {\n    config.mode = mode;\n  }\n\n  if (Array.isArray(config)) {\n    throw new Error('Passing multiple configs as an Array is not supported. Please provide a single config instead.');\n  }\n\n  return config;\n}\n"]}
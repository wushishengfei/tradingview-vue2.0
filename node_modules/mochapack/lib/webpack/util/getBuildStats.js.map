{"version":3,"sources":["../../../src/webpack/util/getBuildStats.js"],"names":["getBuildStats","stats","outputPath","compilation","chunks","chunkGroups","modules","sortedChunks","affectedModules","entries","js","pathHelper","f","path","join","forEach","chunk","files","Array","isArray","isOnlyInitial","entry","push","getModules","some","module","indexOf","id","file","test","buildStats","affectedFiles","map"],"mappings":";;;;;kBAcwBA,a;;AAbxB;;;;AACA;;;;AACA;;;;;;AAWe,SAASA,aAAT,CAAuBC,KAAvB,EAAqCC,UAArC,EAAqE;AAAA,2BACzCD,MAAME,WADmC;AAAA,MAC1EC,MAD0E,sBAC1EA,MAD0E;AAAA,MAClEC,WADkE,sBAClEA,WADkE;AAAA,MACrDC,OADqD,sBACrDA,OADqD;;;AAGlF,MAAMC,eAAe,0BAAWH,MAAX,EAAmBC,WAAnB,CAArB;AACA,MAAMG,kBAAkB,oCAAqBJ,MAArB,EAA6BE,OAA7B,CAAxB;;AAEA,MAAMG,UAAU,EAAhB;AACA,MAAMC,KAAK,EAAX;AACA,MAAMC,aAAa,SAAbA,UAAa,CAACC,CAAD;AAAA,WAAOC,eAAKC,IAAL,CAAUZ,UAAV,EAAsBU,CAAtB,CAAP;AAAA,GAAnB;;AAGAL,eAAaQ,OAAb,CAAqB,UAACC,KAAD,EAAkB;AACrC,QAAMC,QAAQC,MAAMC,OAAN,CAAcH,MAAMC,KAApB,IAA6BD,MAAMC,KAAnC,GAA2C,CAACD,MAAMC,KAAP,CAAzD;;AAEA,QAAID,MAAMI,aAAN,EAAJ,EAA2B;AACzB;AACA,UAAMC,QAAQJ,MAAM,CAAN,CAAd;AACAR,cAAQa,IAAR,CAAaD,KAAb;AACD;;AAED,QAAIL,MAAMO,UAAN,GAAmBC,IAAnB,CAAwB,UAACC,MAAD;AAAA,aAAoBjB,gBAAgBkB,OAAhB,CAAwBD,OAAOE,EAA/B,MAAuC,CAAC,CAA5D;AAAA,KAAxB,CAAJ,EACE;AACAV,YAAMF,OAAN,CAAc,UAACa,IAAD,EAAU;AACtB,YAAI,QAAQC,IAAR,CAAaD,IAAb,CAAJ,EAAwB;AACtBlB,aAAGY,IAAH,CAAQM,IAAR;AACD;AACF,OAJD;AAKD;AACF,GAjBD;;AAmBA,MAAME,aAAyB;AAC7BtB,oCAD6B;AAE7BuB,mBAAerB,GAAGsB,GAAH,CAAOrB,UAAP,CAFc;AAG7BF,aAASA,QAAQuB,GAAR,CAAYrB,UAAZ;AAHoB,GAA/B;;AAMA,SAAOmB,UAAP;AACD","file":"getBuildStats.js","sourcesContent":["// @flow\nimport path from 'path';\nimport sortChunks from './sortChunks';\nimport getAffectedModuleIds from './getAffectedModuleIds';\n\nimport type { Chunk, Module, Stats } from '../types';\n\nexport type BuildStats = {\n  affectedModules: Array<number | string>,\n  affectedFiles: Array<string>,\n  entries: Array<string>,\n};\n\n\nexport default function getBuildStats(stats: Stats, outputPath: string): BuildStats {\n  const { chunks, chunkGroups, modules } = stats.compilation;\n\n  const sortedChunks = sortChunks(chunks, chunkGroups);\n  const affectedModules = getAffectedModuleIds(chunks, modules);\n\n  const entries = [];\n  const js = [];\n  const pathHelper = (f) => path.join(outputPath, f);\n\n\n  sortedChunks.forEach((chunk: Chunk) => {\n    const files = Array.isArray(chunk.files) ? chunk.files : [chunk.files];\n\n    if (chunk.isOnlyInitial()) {\n      // only entry files\n      const entry = files[0];\n      entries.push(entry);\n    }\n\n    if (chunk.getModules().some((module: Module) => affectedModules.indexOf(module.id) !== -1)\n    ) {\n      files.forEach((file) => {\n        if (/\\.js$/.test(file)) {\n          js.push(file);\n        }\n      });\n    }\n  });\n\n  const buildStats: BuildStats = {\n    affectedModules,\n    affectedFiles: js.map(pathHelper),\n    entries: entries.map(pathHelper),\n  };\n\n  return buildStats;\n}\n"]}
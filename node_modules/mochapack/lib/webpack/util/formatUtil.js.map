{"version":3,"sources":["../../../src/webpack/util/formatUtil.js"],"names":["syntaxErrorLabel","replaceEol","message","replace","useValidEol","EOL","stripStackTrace","cleanUpModuleNotFoundMessage","indexOf","cleanUpBuildError","test","split","lines","replacement","join","cleanUpUnwantedEol","indent","map","l","formatErrorMessage","stripLoaderFromPath","file","lastIndexOf","substr"],"mappings":";;;;;;;;;;;AACA;;;;AAGA,IAAMA,mBAAmB,eAAzB;;AAEA;;AACA,IAAMC,aAAa,SAAbA,UAAa,CAACC,OAAD;AAAA,SAAaA,QAAQC,OAAR,CAAgB,QAAhB,EAA0B,IAA1B,CAAb;AAAA,CAAnB;AACA;AACA,IAAMC,cAAc,SAAdA,WAAc,CAACF,OAAD;AAAA,SAAqBA,QAAQC,OAAR,CAAgB,IAAhB,EAAsBE,OAAtB,CAArB;AAAA,CAApB;;AAEA;AACA;AACA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACJ,OAAD;AAAA,SAAqBA,QAAQC,OAAR,CAAgB,uBAAhB,EAAyC,EAAzC,CAArB;AAAA,CAAxB;;AAEA,IAAMI,+BAA+B,SAA/BA,4BAA+B,CAACL,OAAD,EAAqB;AACxD,MAAIA,QAAQM,OAAR,CAAgB,mBAAhB,MAAyC,CAA7C,EAAgD;AAC9C,WAAON,QACJC,OADI,CACI,2CADJ,EACiD,EADjD,EAEJA,OAFI,CAEI,wBAFJ,EAE8B,EAF9B,EAGJA,OAHI,CAGI,wBAHJ,EAG8B,EAH9B,EAIJA,OAJI,CAII,SAJJ,EAIe,EAJf,CAAP;AAKD;AACD,SAAOD,OAAP;AACD,CATD;;AAWA,IAAMO,oBAAoB,SAApBA,iBAAoB,CAACP,OAAD,EAAqB;AAC7C,MAAIA,QAAQM,OAAR,CAAgB,sBAAhB,MAA4C,CAAhD,EAAmD;AACjD;AACA,QAAI,2BAA2BE,IAA3B,CAAgCR,QAAQS,KAAR,CAAc,IAAd,EAAoB,CAApB,CAAhC,CAAJ,EAA6D;AAC3D,UAAMC,QAAQV,QAAQS,KAAR,CAAc,IAAd,CAAd;AACA,UAAIE,cAAcD,MAAM,CAAN,CAAlB;;AAEA;AACA,UAAI,yCAAyCF,IAAzC,CAA8CR,OAA9C,CAAJ,EAA4D;AAC1D;AACAW,sBAAc,mBAAd;AACD,OAHD,MAGO,IAAI,cAAcH,IAAd,CAAmBR,OAAnB,CAAJ,EAAiC;AACtC;AACAW,sBAAcb,gBAAd;AACD;;AAEDY,YAAM,CAAN,IAAWC,WAAX;AACAX,gBAAUU,MAAME,IAAN,CAAW,IAAX,CAAV,CAd2D,CAc/B;AAC7B;;AAED,WAAOZ,QACJC,OADI,CACI,mCADJ,EACyCH,gBADzC,EAC2D;AAD3D,KAEJG,OAFI,CAEI,sBAFJ,EAE4B,EAF5B,CAAP,CAnBiD,CAqBT;AACzC;AACD,SAAOD,OAAP;AACD,CAzBD;;AA2BA;AACA,IAAMa,qBAAqB,SAArBA,kBAAqB,CAACb,OAAD;AAAA,SAAaA,QAAQC,OAAR,CAAgB,WAAhB,EAA6B,EAA7B,CAAb;AAAA,CAA3B;;AAEA;AACA,IAAMa,SAAS,SAATA,MAAS,CAACd,OAAD;AAAA,SAAqBA,QAAQS,KAAR,CAAc,IAAd,EAAoBM,GAApB,CAAwB,UAACC,CAAD;AAAA,kBAAYA,CAAZ;AAAA,GAAxB,EAAyCJ,IAAzC,CAA8C,IAA9C,CAArB;AAAA,CAAf;;AAEA;AACO,IAAMK,kDAAkD,oBAAO,CACpElB,UADoE,EAEpEK,eAFoE,EAGpEC,4BAHoE,EAIpEE,iBAJoE,EAKpEM,kBALoE,EAMpEC,MANoE,EAOpEZ,WAPoE,CAAP,CAAxD;;AAUA,IAAMgB,oDAAsB,SAAtBA,mBAAsB,CAACC,IAAD,EAAkB;AACnD;AACA;AACA;AACA;AACA;AACA,MAAIA,KAAKC,WAAL,CAAiB,GAAjB,MAA0B,CAAC,CAA/B,EAAkC;AAChC,WAAOD,KAAKE,MAAL,CAAYF,KAAKC,WAAL,CAAiB,GAAjB,IAAwB,CAApC,CAAP;AACD;AACD,SAAOD,IAAP;AACD,CAVM","file":"formatUtil.js","sourcesContent":["// @flow\nimport { EOL } from 'os';\nimport _ from 'lodash';\n\nconst syntaxErrorLabel = 'Syntax error:';\n\n// we replace all EOL combinations with \\n and replace to work in a consistent way\nconst replaceEol = (message) => message.replace(/\\r?\\n/g, '\\n');\n// undo eol replacements\nconst useValidEol = (message: string) => message.replace('\\n', EOL);\n\n// strip stacks for module builds as they are useless and just show what happened inside the loader\n// strip at ... ...:x:y\nconst stripStackTrace = (message: string) => message.replace(/^\\s*at\\s.*\\(.+\\)\\n?/gm, '');\n\nconst cleanUpModuleNotFoundMessage = (message: string) => {\n  if (message.indexOf('Module not found:') === 0) {\n    return message\n      .replace('Cannot resolve \\'file\\' or \\'directory\\' ', '')\n      .replace('Cannot resolve module ', '')\n      .replace('Error: Can\\'t resolve ', '')\n      .replace('Error: ', '');\n  }\n  return message;\n};\n\nconst cleanUpBuildError = (message: string) => {\n  if (message.indexOf('Module build failed:') === 0) {\n    // check if first line of message just contains 'Module build failed: '\n    if (/Module build failed:\\s*$/.test(message.split('\\n')[0])) {\n      const lines = message.split('\\n');\n      let replacement = lines[0];\n\n      // try to detect real type of build error\n      if (/File to import not found or unreadable/.test(message)) {\n        // sass-loader file not found -> module not found\n        replacement = 'Module not found:';\n      } else if (/Invalid CSS/.test(message)) {\n        // sass-loader css error -> syntax error\n        replacement = syntaxErrorLabel;\n      }\n\n      lines[0] = replacement;\n      message = lines.join('\\n'); // eslint-disable-line no-param-reassign\n    }\n\n    return message\n      .replace('Module build failed: SyntaxError:', syntaxErrorLabel) // babel-loader error\n      .replace('Module build failed:', ''); // otherwise remove it as it's already clear that this is an module error\n  }\n  return message;\n};\n\n// removes new line characters at the end of message\nconst cleanUpUnwantedEol = (message) => message.replace(/\\s*\\n\\s*$/, '');\n\n// indent all lines by 2 spaces\nconst indent = (message: string) => message.split('\\n').map((l) => `  ${l}`).join('\\n');\n\n// gets executed from top to bottom\nexport const formatErrorMessage: (message: string) => string = _.flow([\n  replaceEol,\n  stripStackTrace,\n  cleanUpModuleNotFoundMessage,\n  cleanUpBuildError,\n  cleanUpUnwantedEol,\n  indent,\n  useValidEol,\n]);\n\nexport const stripLoaderFromPath = (file: string) => {\n  // Remove webpack-specific loader notation from filename.\n  // Before:\n  // ../mochapack/lib/webpack/loader/entryLoader.js!../mochapack/lib/entry.js\n  // After:\n  // ../mochapack/lib/entry.js\n  if (file.lastIndexOf('!') !== -1) {\n    return file.substr(file.lastIndexOf('!') + 1);\n  }\n  return file;\n};\n\n"]}
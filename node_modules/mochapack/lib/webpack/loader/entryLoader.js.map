{"version":3,"sources":["../../../src/webpack/loader/entryLoader.js"],"names":["EntryConfig","files","file","normalizedFile","push","filter","f","entryLoader","loaderOptions","loaderUtils","getOptions","config","entryConfig","clearDependencies","dependencies","getFiles","map","stringifyRequest","forEach","addDependency","bind","sourceCode","callback","module","exports"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEMA,W;AAGJ,yBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,EAAb;AACD;;;;4BAEOC,I,EAAoB;AAC1B,UAAMC,iBAAiB,6BAAcD,IAAd,CAAvB;AACA,WAAKD,KAAL,CAAWG,IAAX,CAAgBD,cAAhB;AACD;;;+BAEUD,I,EAAoB;AAC7B,UAAMC,iBAAiB,6BAAcD,IAAd,CAAvB;AACA,WAAKD,KAAL,GAAa,KAAKA,KAAL,CAAWI,MAAX,CAAkB,UAACC,CAAD;AAAA,eAAOA,MAAMH,cAAb;AAAA,OAAlB,CAAb;AACD;;;+BAEyB;AACxB,aAAO,KAAKF,KAAZ;AACD;;;;;AAGH,IAAMM,cAAc,SAASA,WAAT,GAAuB;AAAA;;AACzC,MAAMC,gBAAgBC,sBAAYC,UAAZ,CAAuB,IAAvB,CAAtB;AACA,MAAMC,SAAsBH,cAAcI,WAA1C;;AAEA;AACA,OAAKC,iBAAL;;AAEA,MAAMC,eAA8BH,OACjCI,QADiC,GAEjCC,GAFiC,CAE7B,UAACd,IAAD;AAAA,WAAUO,sBAAYQ,gBAAZ,CAA6B,KAA7B,EAAmCf,IAAnC,CAAV;AAAA,GAF6B,CAApC;;AAIA;AACAY,eAAaI,OAAb,CAAqB,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;;AAEA;AACA,MAAMC,aAAqB,2BAAYP,YAAZ,CAA3B;;AAEA,OAAKQ,QAAL,CAAc,IAAd,EAAoBD,UAApB,EAAgC,IAAhC;AACD,CAlBD;;AAqBAE,OAAOC,OAAP,GAAiBjB,WAAjB;AACAgB,OAAOC,OAAP,CAAexB,WAAf,GAA6BA,WAA7B","file":"entryLoader.js","sourcesContent":["// @flow\nimport loaderUtils from 'loader-utils';\nimport normalizePath from 'normalize-path';\nimport createEntry from '../util/createEntry';\n\nclass EntryConfig {\n  files: Array<string>;\n\n  constructor() {\n    this.files = [];\n  }\n\n  addFile(file: string): void {\n    const normalizedFile = normalizePath(file);\n    this.files.push(normalizedFile);\n  }\n\n  removeFile(file: string): void {\n    const normalizedFile = normalizePath(file);\n    this.files = this.files.filter((f) => f !== normalizedFile);\n  }\n\n  getFiles(): Array<string> {\n    return this.files;\n  }\n}\n\nconst entryLoader = function entryLoader() {\n  const loaderOptions = loaderUtils.getOptions(this);\n  const config: EntryConfig = loaderOptions.entryConfig;\n\n  // Remove all dependencies of the loader result\n  this.clearDependencies();\n\n  const dependencies: Array<string> = config\n    .getFiles()\n    .map((file) => loaderUtils.stringifyRequest(this, file));\n\n  // add all entries as dependencies\n  dependencies.forEach(this.addDependency.bind(this));\n\n  // build source code\n  const sourceCode: string = createEntry(dependencies);\n\n  this.callback(null, sourceCode, null);\n};\n\n\nmodule.exports = entryLoader;\nmodule.exports.EntryConfig = EntryConfig;\n"]}